plugins {
    id "dev.architectury.loom"
    id "maven-publish"
}

loom {
    forge {
        dataGen {
            mod project.mod_id
        }
    }
}

repositories {
    maven {
        name "CurseMaven"
        url "https://cursemaven.com"
    }
    maven {
        name "Parchment"
        url "https://maven.parchmentmc.org"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment "org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip"
    }

    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    modImplementation "curse.maven:pvz-411396:3682625"
}

processResources {
    Map<String, String> properties = new HashMap<>()

    properties.put "version", project.version
    properties.put "mod_id", project.mod_id
    properties.put "mod_name", project.mod_name
    properties.put "mod_authors", project.mod_authors
    properties.put "minecraft_version", project.minecraft_version
    properties.put "forge_version", project.forge_version
    properties.put "pvz_version", project.pvz_version

    properties.forEach (k, v) -> inputs.property k, v

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

tasks.withType(JavaCompile) {
    options.encoding "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.release = Integer.parseInt(targetCompatibility)
    }
}

java {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
    withSourcesJar()
}

jar {
    archivesBaseName project.mod_id
    from("LICENSE") {
        rename {
            "${it}_${archivesBaseName}"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
